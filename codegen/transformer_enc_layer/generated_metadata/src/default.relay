def @main(%in: Tensor[(32, 10, 512), float32] /* ty=Tensor[(32, 10, 512), float32] */) -> Tensor[(32, 10, 512), float32] {
  %0 = transpose(%in, axes=[1, 0, 2]) /* ty=Tensor[(10, 32, 512), float32] */;
  %1 = reshape(%0, newshape=[-1, 512]) /* ty=Tensor[(320, 512), float32] */;
  %2 = nn.dense(%1, meta[relay.Constant][1] /* ty=Tensor[(1536, 512), float32] */, units=None, out_dtype="float32") /* ty=Tensor[(320, 1536), float32] */;
  %3 = reshape(%2, newshape=[10, 32, 1536]) /* ty=Tensor[(10, 32, 1536), float32] */;
  %4 = add(meta[relay.Constant][0] /* ty=Tensor[(1536), float32] */, %3) /* ty=Tensor[(10, 32, 1536), float32] */;
  %5 = reshape(%4, newshape=[10, 32, 3, 512]) /* ty=Tensor[(10, 32, 3, 512), float32] */;
  %6 = expand_dims(%5, axis=0) /* ty=Tensor[(1, 10, 32, 3, 512), float32] */;
  %7 = transpose(%6, axes=[3, 1, 2, 0, 4]) /* ty=Tensor[(3, 10, 32, 1, 512), float32] */;
  %8 = squeeze(%7, axis=[3]) /* ty=Tensor[(3, 10, 32, 512), float32] */;
  %9 = take(%8, 0i64 /* ty=int64 */, axis=0) /* ty=Tensor[(10, 32, 512), float32] */;
  %10 = reshape(%9, newshape=[10, 256, 64]) /* ty=Tensor[(10, 256, 64), float32] */;
  %11 = transpose(%10, axes=[1, 0, 2]) /* ty=Tensor[(256, 10, 64), float32] */;
  %12 = reshape(%11, newshape=[32, 8, 10, 64]) /* ty=Tensor[(32, 8, 10, 64), float32] */;
  %13 = multiply(%12, meta[relay.Constant][2] /* ty=Tensor[(1), float32] */) /* ty=Tensor[(32, 8, 10, 64), float32] */;
  %14 = take(%8, 1i64 /* ty=int64 */, axis=0) /* ty=Tensor[(10, 32, 512), float32] */;
  %15 = reshape(%14, newshape=[10, 256, 64]) /* ty=Tensor[(10, 256, 64), float32] */;
  %16 = transpose(%15, axes=[1, 0, 2]) /* ty=Tensor[(256, 10, 64), float32] */;
  %17 = reshape(%16, newshape=[32, 8, 10, 64]) /* ty=Tensor[(32, 8, 10, 64), float32] */;
  %18 = transpose(%17, axes=[0, 1, 3, 2]) /* ty=Tensor[(32, 8, 64, 10), float32] */;
  %19 = multiply(%18, meta[relay.Constant][3] /* ty=Tensor[(1), float32] */) /* ty=Tensor[(32, 8, 64, 10), float32] */;
  %20 = reshape(%19, newshape=[-1, 64, 10]) /* ty=Tensor[(256, 64, 10), float32] */;
  %21 = reshape(%13, newshape=[-1, 10, 64]) /* ty=Tensor[(256, 10, 64), float32] */;
  %22 = transpose(%20, axes=[0, 2, 1]) /* ty=Tensor[(256, 10, 64), float32] */;
  %23 = nn.batch_matmul(%21, %22, out_dtype="float32", transpose_b=True) /* ty=Tensor[(256, 10, 10), float32] */;
  %24 = reshape(%23, newshape=[32, 8, 10, 10]) /* ty=Tensor[(32, 8, 10, 10), float32] */;
  %25 = nn.softmax(%24, axis=3) /* ty=Tensor[(32, 8, 10, 10), float32] */;
  %26 = take(%8, 2i64 /* ty=int64 */, axis=0) /* ty=Tensor[(10, 32, 512), float32] */;
  %27 = reshape(%26, newshape=[10, 256, 64]) /* ty=Tensor[(10, 256, 64), float32] */;
  %28 = transpose(%27, axes=[1, 0, 2]) /* ty=Tensor[(256, 10, 64), float32] */;
  %29 = reshape(%28, newshape=[32, 8, 10, 64]) /* ty=Tensor[(32, 8, 10, 64), float32] */;
  %30 = reshape(%29, newshape=[-1, 10, 64]) /* ty=Tensor[(256, 10, 64), float32] */;
  %31 = reshape(%25, newshape=[-1, 10, 10]) /* ty=Tensor[(256, 10, 10), float32] */;
  %32 = transpose(%30, axes=[0, 2, 1]) /* ty=Tensor[(256, 64, 10), float32] */;
  %33 = nn.batch_matmul(%31, %32, out_dtype="float32", transpose_b=True) /* ty=Tensor[(256, 10, 64), float32] */;
  %34 = reshape(%33, newshape=[32, 8, 10, 64]) /* ty=Tensor[(32, 8, 10, 64), float32] */;
  %35 = transpose(%34, axes=[2, 0, 1, 3]) /* ty=Tensor[(10, 32, 8, 64), float32] */;
  %36 = reshape(%35, newshape=[320, 512]) /* ty=Tensor[(320, 512), float32] */;
  %37 = nn.dense(%36, meta[relay.Constant][4] /* ty=Tensor[(512, 512), float32] */, units=512) /* ty=Tensor[(320, 512), float32] */;
  %38 = add(%37, meta[relay.Constant][5] /* ty=Tensor[(512), float32] */) /* ty=Tensor[(320, 512), float32] */;
  %39 = reshape(%38, newshape=[10, 32, 512]) /* ty=Tensor[(10, 32, 512), float32] */;
  %40 = transpose(%39, axes=[1, 0, 2]) /* ty=Tensor[(32, 10, 512), float32] */;
  %41 = add(%in, %40) /* ty=Tensor[(32, 10, 512), float32] */;
  %42 = mean(%41, axis=[-1], keepdims=True) /* ty=Tensor[(32, 10, 1), float32] */;
  %43 = subtract(%41, %42) /* ty=Tensor[(32, 10, 512), float32] */;
  %44 = power(%43, 2f /* ty=float32 */) /* ty=Tensor[(32, 10, 512), float32] */;
  %45 = mean(%44, axis=[-1], keepdims=True) /* ty=Tensor[(32, 10, 1), float32] */;
  %46 = add(%45, 1e-05f /* ty=float32 */) /* ty=Tensor[(32, 10, 1), float32] */;
  %47 = sqrt(%46) /* ty=Tensor[(32, 10, 1), float32] */;
  %48 = divide(%43, %47) /* ty=Tensor[(32, 10, 512), float32] */;
  %49 = multiply(%48, meta[relay.Constant][6] /* ty=Tensor[(512), float32] */) /* ty=Tensor[(32, 10, 512), float32] */;
  %50 = add(%49, meta[relay.Constant][7] /* ty=Tensor[(512), float32] */) /* ty=Tensor[(32, 10, 512), float32] */;
  %51 = reshape(%50, newshape=[-1, 512]) /* ty=Tensor[(320, 512), float32] */;
  %52 = nn.dense(%51, meta[relay.Constant][10] /* ty=Tensor[(2048, 512), float32] */, units=None, out_dtype="float32") /* ty=Tensor[(320, 2048), float32] */;
  %53 = reshape(%52, newshape=[32, 10, 2048]) /* ty=Tensor[(32, 10, 2048), float32] */;
  %54 = add(meta[relay.Constant][9] /* ty=Tensor[(2048), float32] */, %53) /* ty=Tensor[(32, 10, 2048), float32] */;
  %55 = nn.relu(%54) /* ty=Tensor[(32, 10, 2048), float32] */;
  %56 = reshape(%55, newshape=[-1, 2048]) /* ty=Tensor[(320, 2048), float32] */;
  %57 = nn.dense(%56, meta[relay.Constant][11] /* ty=Tensor[(512, 2048), float32] */, units=None, out_dtype="float32") /* ty=Tensor[(320, 512), float32] */;
  %58 = reshape(%57, newshape=[32, 10, 512]) /* ty=Tensor[(32, 10, 512), float32] */;
  %59 = add(meta[relay.Constant][8] /* ty=Tensor[(512), float32] */, %58) /* ty=Tensor[(32, 10, 512), float32] */;
  %60 = add(%50, %59) /* ty=Tensor[(32, 10, 512), float32] */;
  %61 = mean(%60, axis=[-1], keepdims=True) /* ty=Tensor[(32, 10, 1), float32] */;
  %62 = subtract(%60, %61) /* ty=Tensor[(32, 10, 512), float32] */;
  %63 = power(%62, 2f /* ty=float32 */) /* ty=Tensor[(32, 10, 512), float32] */;
  %64 = mean(%63, axis=[-1], keepdims=True) /* ty=Tensor[(32, 10, 1), float32] */;
  %65 = add(%64, 1e-05f /* ty=float32 */) /* ty=Tensor[(32, 10, 1), float32] */;
  %66 = sqrt(%65) /* ty=Tensor[(32, 10, 1), float32] */;
  %67 = divide(%62, %66) /* ty=Tensor[(32, 10, 512), float32] */;
  %68 = multiply(%67, meta[relay.Constant][12] /* ty=Tensor[(512), float32] */) /* ty=Tensor[(32, 10, 512), float32] */;
  add(%68, meta[relay.Constant][13] /* ty=Tensor[(512), float32] */) /* ty=Tensor[(32, 10, 512), float32] */
}

